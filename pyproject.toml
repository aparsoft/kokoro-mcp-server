[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "aparsoft-tts"
version = "1.0.0"
description = "Production-Ready Text-to-Speech Solution for YouTube Videos using Kokoro TTS and MCP Server"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "Apache-2.0"}
authors = [
    {name = "Aparsoft", email = "contact@aparsoft.com"}
]
keywords = [
    "tts",
    "text-to-speech",
    "kokoro",
    "huggingface",
    "mcp",
    "model-context-protocol",
    "youtube",
    "audio",
    "voice-synthesis"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "kokoro>=0.9.2",
    "soundfile>=0.12.1",
    "librosa>=0.10.0",
    "numpy>=1.24.0,<2.0.0",
    "scipy>=1.10.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "structlog>=24.0.0",
    "python-json-logger>=2.0.7",
]

[project.optional-dependencies]
mcp = [
    "fastmcp>=2.0.0",
    "mcp>=1.2.0",
]
cli = [
    "typer>=0.9.0",
    "rich>=13.0.0",
]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
]
all = [
    "aparsoft-tts[mcp,cli,dev,docs]",
]

[project.urls]
Homepage = "https://aparsoft.com"
Documentation = "https://github.com/aparsoft/youtube-tts"
Repository = "https://github.com/aparsoft/youtube-tts"
Issues = "https://github.com/aparsoft/youtube-tts/issues"

[project.scripts]
aparsoft-tts = "aparsoft_tts.cli:app"
aparsoft-tts-server = "aparsoft_tts.mcp_server:main"

[tool.hatch.build.targets.wheel]
packages = ["aparsoft_tts"]

[tool.hatch.build.targets.sdist]
include = [
    "/aparsoft_tts",
    "/tests",
    "/README.md",
    "/LICENSE",
]

# Black configuration
[tool.black]
line-length = 100
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
line-length = 100
target-version = "py310"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

# Mypy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
strict_optional = true

[[tool.mypy.overrides]]
module = [
    "kokoro.*",
    "librosa.*",
    "soundfile.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--strict-config",
    "--cov=aparsoft_tts",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
pythonpath = ["."]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["aparsoft_tts"]
branch = true
omit = [
    "*/tests/*",
    "*/__init__.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
